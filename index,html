<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="utf-8"/>
<title>Asistente Diario - Versión 8</title>
<style>
    body { font-family: Arial, sans-serif; margin: 20px; background: #f4f4f4; }
    h1 { color: #333; }
    .section { margin-bottom: 30px; background: #fff; padding: 20px; border-radius: 8px; }
    input, textarea, select { margin: 5px 0; padding: 8px; width: 100%; }
    button { padding: 10px 15px; margin: 5px 5px 0 0; border: none; border-radius: 5px; cursor: pointer; background: #1976d2; color: white; }
    button:hover { opacity: 0.9; }
    ul { list-style-type: none; padding: 0; }
    li { margin: 5px 0; padding: 5px; background: #eaeaea; border-radius: 5px; cursor: pointer; }
    .completed { text-decoration: line-through; color: gray; }
    .calendar { display: grid; grid-template-columns: repeat(7, 1fr); gap: 5px; }
    .day { background: #ddd; padding: 10px; border-radius: 5px; min-height: 60px; }
    .stats { font-weight: bold; margin-top: 10px; }
    .note-buttons { display: flex; gap: 10px; flex-wrap: wrap; }
</style>
<script>
    function mostrarFechaHora() {
        const ahora = new Date();
        const opciones = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
        const fecha = ahora.toLocaleDateString('es-ES', opciones);
        const hora = ahora.toLocaleTimeString('es-ES');
        document.getElementById("fecha-hora").innerHTML = `${fecha} - ${hora}`;
    }
    setInterval(mostrarFechaHora, 1000);
</script>
</head>
<body>
<h1>🗓️ Asistente Diario - PVergaraA</h1>
    
    <p id="fecha-hora"></p>

<div class="section">
    <h2>✅ Tareas</h2>
    <input id="taskInput" placeholder="Escribe una tarea..." type="text"/>
    <select id="taskTag">
        <option value="">Etiqueta</option>
        <option value="Urgente">Urgente</option>
        <option value="Reunión">Reunión</option>
        <option value="Pendiente">Pendiente</option>
    </select>
    <input id="taskDate" type="date"/>
    <button onclick="addTask()">Agregar tarea</button>
    <button style="background:#d32f2f" onclick="deleteCompletedTasks()">🗑️ Borrar tareas completadas</button>
    <ul id="taskList"></ul>
    <p class="stats" id="taskStats"></p>
</div>

<div class="section">
    <h2>📝 Notas rápidas - Dictado </h2>
    <textarea id="noteInput" placeholder="Escribe una nota..." rows="4"></textarea>
    <div class="note-buttons">
        <button onclick="addNote()">Guardar nota</button>
        <button onclick="startDictation()">🎙️ Comenzar dictado</button>
        <button onclick="exportNotes()">Exportar notas</button>
        <button style="background:#d32f2f" onclick="deleteCompletedNotes()">🗑️ Borrar notas completadas</button>
    </div>
    <p id="recordingTimer">⏱️ Tiempo de grabación: 0 segundos</p>
    <ul id="noteList"></ul>
    <p class="stats" id="noteStats"></p>
</div>

<!-- 🔍 BUSCADOR DE TAREAS Y NOTAS -->
<section id="buscador" class="mt-6">
  <h2 class="text-xl font-semibold mb-2">Buscar tareas y notas</h2>
  <div class="flex items-center gap-2">
    <input
      type="text"
      id="searchInput"
      placeholder="Escribe para buscar..."
      class="flex-1 border p-2 rounded"
    />
    <button
      id="searchBtn"
      class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-2 rounded"
    >
      Buscar
    </button>
    <button
      id="clearSearchBtn"
      class="bg-gray-400 hover:bg-gray-500 text-white px-3 py-2 rounded"
    >
      Limpiar
    </button>
  </div>
  <div id="searchResults" class="mt-4"></div>
</section>

<script>

const searchInput = document.getElementById("searchInput");
const searchResults = document.getElementById("searchResults");
const clearSearchBtn = document.getElementById("clearSearchBtn");

clearSearchBtn.addEventListener("click", () => {
  searchInput.value = "";
  searchResults.innerHTML = "";
  mostrarTareas();  // 🔄 vuelve a mostrar todas las tareas
  mostrarNotas();   // 🔄 vuelve a mostrar todas las notas
});

</script>

<div class="section">
    <h2>📅 Calendario de tareas</h2>
    <div class="calendar" id="calendarView"></div>
</div>

<script>
    let tasks = JSON.parse(localStorage.getItem('tasks') || '[]');
    let notes = JSON.parse(localStorage.getItem('notes') || '[]');

    notes = notes.filter(n => n && n.text && n.text.trim() !== "");

    function saveData() {
        localStorage.setItem('tasks', JSON.stringify(tasks));
        localStorage.setItem('notes', JSON.stringify(notes));
    }

    // ---- TAREAS ----
    function addTask() {
        const text = document.getElementById('taskInput').value;
        const tag = document.getElementById('taskTag').value;
        const date = document.getElementById('taskDate').value;
        if (text.trim()) {
            tasks.push({ text, tag, date, done: false });
            saveData();
            document.getElementById('taskInput').value = '';
            renderTasks();
            renderCalendar();
        }
    }

    function toggleTask(index) {
        tasks[index].done = !tasks[index].done;
        saveData();
        renderTasks();
        renderCalendar();
    }

    function deleteCompletedTasks() {
        tasks = tasks.filter(t => !t.done);
        saveData();
        renderTasks();
        renderCalendar();
    }

    function renderTasks() {
        const list = document.getElementById('taskList');
        list.innerHTML = '';
        tasks.forEach((task, i) => {
            const li = document.createElement('li');
            li.className = task.done ? 'completed' : '';
            li.innerText = `${task.text} (${task.tag || 'Sin etiqueta'}) - ${task.date || 'Sin fecha'}`;
            li.onclick = () => toggleTask(i);
            list.appendChild(li);
        });
        const completed = tasks.filter(t => t.done).length;
        document.getElementById('taskStats').innerText = `Completadas: ${completed} / Pendientes: ${tasks.length - completed}`;
    }

    // ---- NOTAS ----
    function addNote(text = null) {
        const noteText = text || document.getElementById('noteInput').value;
        if (noteText.trim()) {
            notes.push({ id: Date.now(), text: noteText.trim(), done: false });
            saveData();
            document.getElementById('noteInput').value = '';
            renderNotes();
        }
    }

    function toggleNote(id) {
        const note = notes.find(n => n.id === id);
        if (note) {
            note.done = !note.done;
            saveData();
            renderNotes();
        }
    }

    function deleteCompletedNotes() {
        notes = notes.filter(n => !n.done);
        saveData();
        renderNotes();
    }

    function renderNotes() {
        const list = document.getElementById('noteList');
        list.innerHTML = '';
        notes.slice().reverse().forEach(note => {
            const li = document.createElement('li');
            li.className = note.done ? 'completed' : '';
            li.innerText = note.text;
            li.onclick = () => toggleNote(note.id);
            list.appendChild(li);
        });
        const completed = notes.filter(n => n.done).length;
        document.getElementById('noteStats').innerText = `Completadas: ${completed} / Pendientes: ${notes.length - completed}`;
    }

    // ---- DICTADO ----
    let recordingInterval;
    let recordingSeconds = 0;

    function startDictation() {
        const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
        recognition.lang = 'es-ES';
        recognition.onresult = function(event) {
            const transcript = event.results[0][0].transcript;
            addNote("🗣️ Dictado: " + transcript);
            clearInterval(recordingInterval);
        };
        recognition.onerror = function() { clearInterval(recordingInterval); };
        recognition.onend = function() { clearInterval(recordingInterval); };

        recordingSeconds = 0;
        document.getElementById('recordingTimer').innerText = "⏱️ Tiempo de grabación: 0 segundos";
        recordingInterval = setInterval(() => {
            recordingSeconds++;
            document.getElementById('recordingTimer').innerText = `⏱️ Tiempo de grabación: ${recordingSeconds} segundos`;
        }, 1000);

        recognition.start();
    }

    // ---- CALENDARIO ----
    function renderCalendar() {
        const calendar = document.getElementById('calendarView');
        calendar.innerHTML = '';
        const today = new Date();
        const year = today.getFullYear();
        const month = today.getMonth();
        const daysInMonth = new Date(year, month + 1, 0).getDate();

        for (let d = 1; d <= daysInMonth; d++) {
            const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(d).padStart(2, '0')}`;
            const dayDiv = document.createElement('div');
            dayDiv.className = 'day';
            dayDiv.innerHTML = `<strong>${d}</strong><br>`;
            tasks.filter(t => t.date === dateStr).forEach(t => {
                const p = document.createElement('p');
                p.innerText = t.text;
                p.style.fontSize = '12px';
                dayDiv.appendChild(p);
            });
            calendar.appendChild(dayDiv);
        }
    }

    // ---- BÚSQUEDA ----
    function searchItems() {
        const query = document.getElementById('searchInput').value.toLowerCase();
        const results = document.getElementById('searchResults');
        results.innerHTML = '';
        tasks.filter(t => t.text.toLowerCase().includes(query)).forEach(t => {
            const li = document.createElement('li');
            li.innerText = `Tarea: ${t.text}`;
            results.appendChild(li);
        });
        notes.filter(n => n.text.toLowerCase().includes(query)).forEach(n => {
            const li = document.createElement('li');
            li.innerText = `Nota: ${n.text}`;
            results.appendChild(li);
        });
    }

    // ---- Inicialización ----
    renderTasks();
    renderNotes();
    renderCalendar();
</script>
</body>
</html>
